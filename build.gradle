buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo1.maven.org/maven2" }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url "https://oss.sonatype.org/content/repositories/releases/"
        }
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        // Updated version can be passed via command line arg as -PopenApiGeneratorVersion=VERSION
        classpath "org.openapitools:openapi-generator-gradle-plugin:$openApiGeneratorVersion"
    }
}

apply plugin: 'org.openapi.generator'

openApiMeta {
    generatorName = "Sample"
    packageName = "org.openapitools.example"
    outputFolder = "$buildDir/meta".toString()
}

openApiValidate {
    inputSpec = "$rootDir/petstore-v3.0-invalid.yaml".toString()
    recommend = true
}

// Builds a Kotlin client by default.
openApiGenerate {
    generatorName = "kotlin"
    inputSpec = "$rootDir/petstore-v3.0.yaml".toString()
    outputDir = "$buildDir/kotlin".toString()
    apiPackage = "org.openapitools.example.api"
    invokerPackage = "org.openapitools.example.invoker"
    modelPackage = "org.openapitools.example.model"
    configOptions = [
            dateLibrary: "java8"
    ]
    globalProperties = [
            modelDocs: "false"
    ]
    skipValidateSpec = true
    logToStderr = true
    generateAliasAsModel = false
    // set to true and set environment variable {LANG}_POST_PROCESS_FILE
    // (e.g. SCALA_POST_PROCESS_FILE) to the linter/formatter to be processed.
    // This command will be passed one file at a time for most supported post processors.
    enablePostProcessFile = false
}

task buildSpringServer(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "spring"
    library       = "spring-boot"
    inputSpec = "$rootDir/petstore-v3.0.yaml".toString()
    outputDir = "$buildDir/spring-server"
    apiPackage = "com.todo.contract.api.auth.rest.api"
    invokerPackage = "com.todo.contract.api.auth.rest.invoker"
    modelPackage = "com.todo.contract.api.auth.rest.model"
    configOptions = [
            dateLibrary        : "java8",
	    reactive           : "true",
            delegatePattern    : "true",
            groupId            : "com.todo.contract.api.auth",
            artifactId         : "authorization-service",
    ]
    generateApiDocumentation = false
    generateModelDocumentation = false
    generateModelTests = false
    generateApiTests = false
    withXml = true
}

task buildNodeServer(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "nodejs-express-server"
    inputSpec = "$rootDir/petstore-v3.0.yaml".toString()
    outputDir = "$buildDir/node-server"
    apiPackage = "com.todo.contract.api.auth.rest.api"
    invokerPackage = "com.todo.contract.api.auth.rest.invoker"
    modelPackage = "com.todo.contract.api.auth.rest.model"
    configOptions = [
            dateLibrary        : "java8",
	        reactive           : "true",
            delegatePattern    : "true",
            groupId            : "com.todo.contract.api.auth",
            artifactId         : "authorization-service",
    ]
    generateApiDocumentation = false
    generateModelDocumentation = false
    generateModelTests = false
    generateApiTests = false
    withXml = true
}

task buildSpringClient(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "java"
    library = "resttemplate"
    inputSpec = "$rootDir/petstore-v3.0.yaml".toString()
    outputDir = "$buildDir/spring-client"
    apiPackage = "com.todo.contract.api.auth.rest.api"
    invokerPackage = "com.todo.contract.api.auth.rest.invoker"
    modelPackage = "com.todo.contract.api.auth.rest.model"
    configOptions = [
            dateLibrary: "java8",
            library    : "webclient",
            groupId    : "com.todo.contract.api.auth",
            artifactId : "authorization-service-client"
    ]
    groupId = 'com.example'
    id = 'client'
    skipValidateSpec = true
    logToStderr = true
    generateAliasAsModel = true
    enablePostProcessFile = true
    generateApiDocumentation = true
    generateModelDocumentation = true
    generateModelTests = true
    generateApiTests = true
    withXml = true
}

task buildSpringTypeScriptAxiosClient(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "typescript-axios"
    inputSpec = "$rootDir/petstore-v3.0.yaml".toString()
    outputDir = "$buildDir/axios-client"
    apiPackage = "com.todo.contract.api.auth.rest.api"
    invokerPackage = "com.todo.contract.api.auth.rest.invoker"
    modelPackage = "com.todo.contract.api.auth.rest.model"
    configOptions = [
            dateLibrary: "java8",
            library    : "webclient",
            groupId    : "com.todo.contract.api.auth",
            artifactId : "authorization-service-client"
    ]
    groupId = 'com.example'
    id = 'client'
    skipValidateSpec = true
    logToStderr = true
    generateAliasAsModel = true
    enablePostProcessFile = true
    generateApiDocumentation = true
    generateModelDocumentation = true
    generateModelTests = true
    generateApiTests = true
    withXml = true
}

task validateGoodSpec(type: org.openapitools.generator.gradle.plugin.tasks.ValidateTask){
    inputSpec = "$rootDir/petstore-v3.0.yaml".toString()
}

task validateBadSpec(type: org.openapitools.generator.gradle.plugin.tasks.ValidateTask){
    inputSpec = "$rootDir/petstore-v3.0-invalid.yaml".toString()
}

task validateSpecs(dependsOn: ['validateGoodSpec', 'validateBadSpec'])
